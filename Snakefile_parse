import pandas as pd
df = pd.read_csv("input/tree_genomes", sep = '\t')
IDS = tuple(df)

rule all:
	input:
		protein_coding_db = "output_parser/protein_Protein_coding_gene.fa",
		p_protein_coding_fasta = "output_parser/nucleotide_Protein_coding_gene.fa",
		n_protein_coding_fasta = "output_parser/Protein_coding_gene.db",
		Noncoding_regions = "output_parser/Noncoding_region.fa",
		list = "output_parser/list.tsv"


##Prokka for annotation of input fasta file generating GFF version 3 file, so later on parsing can be don.##
rule annotation:
	input:
		fasta_file = "input/E_coli_K12.fasta"
	output:
		 GFF_file = "output_prokka/E_coli_K12.gff"
	params:
		prefix = "E_coli_K12",
		out_dir = "output_prokka"
	log:
		"logs/prokka.log"
	threads: 16
	conda:
	    "envs/prokka.yaml"
	shell:
		"""
		prokka --force --outdir {params.out_dir} --prefix {params.prefix} --rfam --quiet {input.fasta_file} 2>&1> {log}
		"""

##Python script for parsing genome input data to: IGR, Protein coding genes and RNA genes.##
rule parse_genome_data:
	input:
		GFF_file = "output_prokka/E_coli_K12.gff",
		fasta_file = "input/E_coli_K12.fasta"
	output:
		protein_coding_db = "output_parser/protein_Protein_coding_gene.fa",
		p_protein_coding_fasta = "output_parser/nucleotide_Protein_coding_gene.fa",
		n_protein_coding_fasta = "output_parser/Protein_coding_gene.db",
		Noncoding_regions = "output_parser/Noncoding_region.fa",
		list = "output_parser/list.tsv"
	params:
		output = "output_parser"
	threads: 16
	log:
		"logs/parse.log"
	conda:
		"envs/python.yaml"
	shell:
		 """
		 python Modules/genome_parser_IGR.py -i {input.fasta_file} -a {input.GFF_file}  2>&1> {log}
		 mv *.fa {params.output}
		 mv *.db {params.output}  
		 mv list.tsv {params.output}
		 """




