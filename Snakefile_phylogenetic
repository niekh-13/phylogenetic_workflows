configfile: "config.yaml"
IDS, = glob_wildcards("art_reads/{sample}_1.fq")

rule all:
    input:
        "plots/NGA50.pdf",
        "plots/contigs.pdf",
        "plots/misassemblies.pdf",
        "plots/genome_fraction.pdf",
        "plots/complete_features.pdf",
        "plots/total_features.pdf",
        "RF_distance/ska_fastq.txt",
        "RF_distance/ska_shovill.txt",
        "RF_distance/ska_spades.txt",
        "RF_distance/roary_spades.txt",
        "RF_distance/snippy.txt",
        "RF_distance/roary_shovill.txt",
        "RF_distance/roary_skesa.txt",
        "RF_distance/pirate_spades.txt",
        "RF_distance/pirate_shovill.txt",
        "RF_distance/pirate_skesa.txt",
        "RF_distance/ksnp_spades.txt",
        "RF_distance/ksnp_shovill.txt",
        "RF_distance/ksnp_skesa.txt",

###actual Workflow:

##denovo assembly with Skesa
rule skesa:
    input:
        read1 = "art_reads/{sample}_1.fq",
        read2 = "art_reads/{sample}_2.fq"
    output:
        output = "assemblies/skesa/{sample}.fasta"
    params:
        prefix = "{sample}.fasta",
        contig = config["skesa"]["min_contig_len"]
    conda:
        "envs/skesa.yaml"
    log:
        "logs/skesa/{sample}.log"
    threads: 8
    shell:
         """
         skesa --cores {threads} --min_contig {params.contig} --fastq {input.read1},{input.read2} --contigs_out {output.output} 2>&1> {log}
         """
##denovo assembly with shovill+velvet
rule shovill_velvet:
    input:
        read1 = "art_reads/{sample}_1.fq",
        read2 = "art_reads/{sample}_2.fq"
    output:
        output = "assemblies/shovill_velvet/shovill_velvet-{sample}/velvet.fasta"
    params:
        prefix = "{sample}",
        assembler = config["shovill_velvet"]["assembler"],
        len = config["shovill_velvet"]["min_contig_len"]
    conda:
        "envs/shovill.yaml"
    log:
        "logs/shovill_velvet/{sample}.log"
    threads: 8
    shell:
        """     
        shovill --force --cpus {threads} --assembler {params.assembler} --minlen {params.len} -R1 {input.read1} -R2 {input.read2} --outdir shovill_velvet-{params.prefix} 2>&1> {log}
        mv shovill_velvet-{params.prefix} assemblies/shovill_velvet
        """
##denovo assembly with shovill+spades
rule shovill_spades:
    input:
        read1 = "art_reads/{sample}_1.fq",
        read2 = "art_reads/{sample}_2.fq"
    output:
        output = "assemblies/shovill_spades/shovill_spades-{sample}/spades.fasta"
    params:
        prefix = "{sample}",
        assembler = config["shovill_spades"]["assembler"],
        len = config["shovill_spades"]["min_contig_len"]
    conda:
        "envs/shovill.yaml"
    log:
        "logs/shovill_spades/{sample}.log"
    threads: 8
    shell:
        """     
        shovill --force --cpus {threads} --assembler {params.assembler} ----minlen {params.len}  -R1 {input.read1} -R2 {input.read2} --outdir shovill_spades-{params.prefix} 2>&1> {log}
        mv shovill_spades-{params.prefix} assemblies/shovill_spades
        """
##denove assembly with isolate spades
rule spades:
    input:
        read1 = "art_reads/{sample}_1.fq",
        read2 = "art_reads/{sample}_2.fq"
    output:
        output = "assemblies/spades/spades-{sample}/contigs.fasta"
    params:
        prefix = "{sample}",
        basic = config["spades"]["basic_options"],
        length = config["spades"]["min_contig_len"]
    conda:
        "envs/spades.yaml"
    log:
        "logs/spades/{sample}.log"
    threads: 8
    shell:
        """        
        spades.py -t {threads} {params.basic} -1 {input.read1} -2 {input.read2} -o spades-{params.prefix} 2>&1> {log}
        mv spades-{params.prefix} assemblies/spades            
        """

##prokka
rule prokka:
    input:
        reference = "genomes/{sample}.fasta"
    output:
        gff = "prokka/prokka-{sample}/prokka-{sample}.gff",
        tsv = "prokka/prokka-{sample}/prokka-{sample}.tsv",
    params:
        genus = config["prokka"]["genus"],
        prefix = "{sample}"
    conda:
        "envs/prokka.yaml"
    log:
        "logs/prokka/{sample}.log"
    threads: 2
    shell:
        """
        prokka --prefix prokka-{params.prefix} --genus {params.genus} --usegenus  --quiet --force --cpus {threads} {input.reference} 2>&1> {log}
        mv prokka-{params.prefix} prokka
        """

##quast for skesa
rule quast_skesa:
    input:
        contigs = "assemblies/skesa/{sample}.fasta",
        reference = "genomes/{sample}.fasta",
        ggf = "prokka/prokka-{sample}/prokka-{sample}.gff"
    output:
        tsv = "quast/quast_skesa-{sample}/report.tsv"
    params:
        prefix = "{sample}",
        min_len = config["quast"]["min_contig_len"]
    log:
        "logs/quast_skesa/{sample}.log"
    threads: 2
    conda:
        "envs/quast.yaml"
    shell:
        """        
        quast -t {threads} -m {params.min_len} {input.contigs} -r {input.reference} -g {input.ggf} -o quast_skesa-{params.prefix} 2>&1> {log}
        mv quast_skesa-{params.prefix} quast
        """
##quast for shovill
rule quast_shovill_velvet:
    input:
        contigs = "assemblies/shovill_velvet/shovill_velvet-{sample}/velvet.fasta",
        reference = "genomes/{sample}.fasta",
        ggf = "prokka/prokka-{sample}/prokka-{sample}.gff"
    output:
        tsv = "quast/quast_shovill_velvet-{sample}/report.tsv"
    params:
        prefix = "{sample}",
        min_len = config["quast"]["min_contig_len"]
    log:
        "logs/quast_shovill_velvet/{sample}.log"
    threads: 2
    conda:
        "envs/quast.yaml"
    shell:
        """      
        quast -t {threads} -m {params.min_len} {input.contigs} -r {input.reference} -g {input.ggf} -o quast_shovill_velvet-{params.prefix} 2>&1> {log}
        mv quast_shovill_velvet-{params.prefix} quast
        """
##quast for shovill_spades
rule quast_shovill_spades:
    input:
        contigs = "assemblies/shovill_spades/shovill_spades-{sample}/spades.fasta",
        reference = "genomes/{sample}.fasta",
        ggf = "prokka/prokka-{sample}/prokka-{sample}.gff"
    output:
        tsv = "quast/quast_shovill_spades-{sample}/report.tsv"
    params:
        prefix = "{sample}",
        min_len = config["quast"]["min_contig_len"]
    log:
        "logs/quast_shovill_spades/{sample}.log"
    threads: 2
    conda:
        "envs/quast.yaml"
    shell:
        """      
        quast -t {threads} -m {params.min_len} {input.contigs} -r {input.reference} -g {input.ggf} -o quast_shovill_spades-{params.prefix} 2>&1> {log}
        mv quast_shovill_spades-{params.prefix} quast
        """
##quast for spades
rule quast_spades:
    input:
        contigs = "assemblies/spades/spades-{sample}/contigs.fasta",
        reference = "genomes/{sample}.fasta",
        ggf = "prokka/prokka-{sample}/prokka-{sample}.gff"
    output:
        tsv = "quast/quast_spades-{sample}/report.tsv"
    params:
        prefix = "{sample}",
        min_len = config["quast"]["min_contig_len"]
    log:
        "logs/quast_spades/{sample}.log"
    threads: 2
    conda:
        "envs/quast.yaml"
    shell:
        """
        quast -t {threads} -m {params.min_len} {input.contigs} -r {input.reference} -g {input.ggf} -o quast_spades-{params.prefix} 2>&1> {log}
        mv quast_spades-{params.prefix} quast
        """
##quast report with all quast files
rule quast_report:
    input:
        expand("quast/quast_spades-{sample}/report.tsv", sample = IDS),
        expand("quast/quast_skesa-{sample}/report.tsv", sample= IDS),
        expand("quast/quast_shovill_velvet-{sample}/report.tsv", sample = IDS),
        expand("quast/quast_shovill_spades-{sample}/report.tsv", sample = IDS),
        expand("prokka/prokka-{sample}/prokka-{sample}.tsv", sample = IDS)
    output:
        spades = "quast-report/quast-report_spades.tsv",
        skesa = "quast-report/quast-report_skesa.tsv",
        shovill_v = "quast-report/quast-report_shovill_velvet.tsv",
        shovill_s = "quast-report/quast-report_shovill_spades.tsv",
        all = "quast-report/quast-report.tsv"
    params:
        quantity = config["quast_report"]["quantity"],
        name = config["quast_report"]["name"]
    conda:
        "envs/quast_report.yaml"
    log:
       "logs/quast_report/log"
    shell:
        """
        python Modules/quast-report.py -q {params.quantity} -o quast-report/{params.name} 2>&1> {log}
        """
rule boxplot:
    input:
        df = "quast-report/quast-report.tsv"
    output:
        NGA50_pdf = "plots/NGA50.pdf",
        contigs_pdf = "plots/contigs.pdf",
        missassemblies_pdf = "plots/misassemblies.pdf",
        fraction_pdf = "plots/genome_fraction.pdf",
        c_features_pdf = "plots/complete_features.pdf",
        t_features_pdf = "plots/total_features.pdf"
    conda:
        "envs/R.yaml"
    log:
       "logs/boxplot.log"
    shell:
         """
         Rscript Modules/boxplot.R -f {input.df} 2>&1> {log}
         mv *.pdf plots/
         """

#alignment with ska
rule SKA_kmer_reads:
    input:
        read1 = "art_reads/{sample}_1.fq",
        read2 = "art_reads/{sample}_2.fq"
    output:
        ska = "ska_fastq_out/{sample}.skf"
    params:
        strain = "ska_fastq_out/{sample}"

    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/kmer_fastq/{sample}.log"
    shell:
        """
        ska fastq -o {params.strain} {input.read1} {input.read2} 2>&1>{log}
        """
rule SKA_kmer_shovill:
    input:
        fasta = "assemblies/shovill_velvet/shovill_velvet-{sample}/velvet.fasta"
    output:
        ska = "ska_shovill_out/{sample}.skf"
    params:
        strain = "ska_shovill_out/{sample}"
    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/kmer_shovill/{sample}.log"
    shell:
        """
        ska fasta -o {params.strain} {input.fasta} 2>&1>{log}
        """
rule SKA_kmer_spades:
    input:
        fasta = "assemblies/spades/spades-{sample}/contigs.fasta"
    output:
        ska = "ska_spades_out/{sample}.skf"
    params:
        strain = "ska_spades_out/{sample}"
    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/kmer_spades/{sample}.log"
    shell:
        """
        ska fasta -o {params.strain} {input.fasta} 2>&1>{log}
        """
rule SKA_kmer_skesa:
    input:
        fasta = "assemblies/skesa/{sample}.fasta"
    output:
        ska = "ska_skesa_out/{sample}.skf"
    params:
        strain = "ska_skesa_out/{sample}"
    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/kmer_skesa/{sample}.log"
    shell:
        """
        ska fasta -o {params.strain} {input.fasta} 2>&1>{log}
        """
rule SKA_align_reads:
    input:
        fastq = expand("ska_fastq_out/{sample}.skf", sample = IDS)
    output:
        aln = "ska_output/ska_fastq_alignment.aln"
    params:
        output= "ska_output/ska_fastq_alignment"
    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/align/fastq.log"
    shell:
        """
        ska align -o {params.output} -p 0 {input.fastq} 2>&1>{log}
        """
rule SKA_align_shovill:
    input:
        fastq = expand("ska_shovill_out/{sample}.skf", sample = IDS)
    output:
        aln = "ska_output/ska_shovill_alignment.aln"
    params:
        output= "ska_output/ska_shovill_alignment"
    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/align/shovill_fasta.log"
    shell:
        """
        ska align -o {params.output} -p 0 {input.fastq} 2>&1>{log}
        """
rule Ska_align_spades:
    input:
        fastq = expand("ska_spades_out/{sample}.skf", sample = IDS)
    output:
        aln = "ska_output/ska_spades_alignment.aln"
    params:
        output= "ska_output/ska_spades_alignment"
    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/align/spades_fasta.log"
    shell:
        """
        ska align -o {params.output} -p 0 {input.fastq} 2>&1>{log}
        """
rule Ska_align_skesa:
    input:
        fastq = expand("ska_skesa_out/{sample}.skf", sample = IDS)
    output:
        aln = "ska_output/ska_skesa_alignment.aln"
    params:
        output= "ska_output/ska_skesa_alignment"
    threads: 8
    conda:
         "envs/ska.yaml"
    log:
       "logs/ska/align/skesa_fasta.log"
    shell:
        """
        ska align -o {params.output} -p 0 {input.fastq} 2>&1>{log}
        """

#prokka for pirate and roary
rule prokka_spades:
    input:
        spades = "assemblies/spades/spades-{sample}/contigs.fasta"
    output:
        prokka =  "prokka/spades/spades-{sample}.gff"
    threads: 8
    params:
        genus = config["prokka"]["genus"],
        prefix = "{sample}"
    log:
        "logs/prokka/spades/{sample}.log"
    conda:
        "envs/prokka.yaml"
    shell:
        """
        prokka --prefix spades-{params.prefix} --centre X --compliant --genus {params.genus} --usegenus --quiet --force --cpus {threads} {input.spades} 2>&1> {log}
        mv spades-{params.prefix}/spades-{params.prefix} prokka/spades
        rm -r spades-{params.prefix}
        """
rule prokka_skesa:
    input:
        skesa = "assemblies/skesa/{sample}.fasta"
    output:
        prokka =  "prokka/skesa/skesa-{sample}.gff"
    threads: 8
    params:
        genus = config["prokka"]["genus"],
        prefix = "{sample}"
    log:
        "logs/prokka/skesa/{sample}.log"
    conda:
        "envs/prokka.yaml"
    shell:
        """
        prokka --prefix skesa-{params.prefix} --centre X --compliant --genus {params.genus} --usegenus --quiet --force --cpus {threads} {input.skesa} 2>&1> {log}
        mv skesa-{params.prefix}/skesa-{params.prefix}.gff prokka/skesa
        rm -r skesa-{params.prefix}
        """
rule prokka_shovill:
    input:
        shovill = "assemblies/shovill_velvet/shovill_velvet-{sample}/velvet.fasta"
    output:
        prokka =  "prokka/shovill/shovill-{sample}.gff"
    threads: 8
    params:
        genus = config["prokka"]["genus"],
        prefix = "{sample}"
    log:
        "logs/prokka/shovill/{sample}.log"
    conda:
        "envs/prokka.yaml"
    shell:
        """
        prokka --prefix shovill-{params.prefix} --centre X --compliant --genus {params.genus} --usegenus --quiet --force --cpus {threads} {input.shovill} 2>&1> {log}
        mv shovill-{params.prefix}/shovill-{params.prefix}.gff prokka/shovill
        rm -r shovill-{params.prefix}
        """

#roary
rule roary_spades:
    input:
         prokka = expand("prokka/spades/spades-{sample}.gff", sample = IDS)
    output:
          aln = directory("roary/spades")
    threads: 8
    log:
        "logs/roary/spades.log"
    conda:
        "envs/roary.yaml"
    shell:
        """
        roary -e --mafft -p {threads} {input.prokka} -f {output.aln} 2>&1> {log}
        if [ -f {output.aln}/core_gene_alignment.aln ]; then echo "{output.aln}/core_gene_alignment.aln exists"; else exit 1; fi
        """
rule roary_skesa:
    input:
         prokka = expand("prokka/skesa/skesa-{sample}.gff", sample = IDS)
    output:
          aln = directory("roary/skesa")
    threads: 8
    log:
        "logs/roary/skesa.log"
    conda:
        "envs/roary.yaml"
    shell:
        """
        roary -e --mafft -p {threads} {input.prokka} -f {ouput.aln} 2>&1> {log}
        if [ -f {output.aln}/core_gene_alignment.aln ]; then echo "{output.aln}/core_gene_alignment.aln exists"; else exit 1; fi
        """
rule roary_shovill:
    input:
         prokka = expand("prokka/shovill/shovill-{sample}.gff", sample = IDS)
    output:
          aln = directory("roary/shovill")
    threads: 8
    log:
        "logs/roary/shovill.log"
    conda:
        "envs/roary.yaml"
    shell:
        """
        roary -e --mafft -p {threads} {input.prokka} -f {output.aln} 2>&1> {log}
        if [ -f {output.aln}/core_gene_alignment.aln ]; then echo "{output.aln}/core_gene_alignment.aln exists"; else exit 1; fi
        """

#pirate
rule pirate_spades:
    input:
         prokka = expand("prokka/spades/spades-{sample}.gff", sample = IDS)
    output:
          aln = "pirate/spades/core_alignment.fasta"
    threads: 8
    params:
        dir = "prokka/spades",
        out = "pirate/spades"
    log:
        "logs/pirate/spades.log"
    conda:
        "envs/pirate.yaml"
    shell:
        """
        PIRATE -i {params.dir} -o {params.out} -a 2>&1> {log}
        """
rule pirate_skesa:
    input:
        prokka = expand("prokka/skesa/skesa-{sample}.gff", sample = IDS)
    output:
        aln = "pirate/skesa/core_alignment.fasta"
    threads: 8
    params:
        dir = "prokka/skesa",
        out = "pirate/skesa"
    log:
        "logs/pirate/skesa.log"
    conda:
        "envs/pirate.yaml"
    shell:
        """
        PIRATE -i {params.dir} -o {params.out} -a 2>&1> {log}
        """
rule pirate_shovill:
    input:
        prokka = expand("prokka/shovill/shovill-{sample}.gff", sample = IDS)
    output:
        aln = "pirate/shovill/core_alignment.fasta"
    threads: 8
    params:
        dir = "prokka/shovill",
        out = "pirate/shovill"
    log:
        "logs/pirate/shovill.log"
    conda:
        "envs/pirate.yaml"
    shell:
        """
        PIRATE -i {params.dir} -o {params.out} -a 2>&1> {log}
        """

#snippy
rule snippy:
    input:
         read1 = "art_reads/{sample}_1.fq",
         read2 = "art_reads/{sample}_2.fq",
         ecolik12 = config["snippy"]["ecolik12"]
    output:
         aln = directory("snippy/{sample}")
    params:
        general = config["snippy"]["general"]
    threads: 8
    log:
         "logs/snippy/snippy-{sample}.log"
    conda:
         "envs/snippy.yaml"
    shell:
         """
         snippy {params.general} --cpus {threads} --outdir {output.aln} --ref {input.ecolik12} --pe1 {input.read1} --pe2 {input.read2} 2>{log} 
         """
rule snippy_core:
    input:
        data = expand("snippy/{sample}", sample=IDS),
        ecolik12 = config["snippy"]["ecolik12"]
    output:
        full = "snippy-core_out/core.full.aln",
        snps = "snippy-core_out/core.aln"
    params:
         outdir = "snippy-core_out"
    log:
        "logs/snippy/snippy-core.log"
    conda:
        "envs/snippy.yaml"
    shell:
        """
        mkdir -p {params.outdir}
		snippy-core --ref {input.ecolik12} {input.data} 2>&1>{log}
		mv core.* {params.outdir}
        """

#ksnp
rule ksnp_make_skesa:
    input:
        contigs = expand("assemblies/skesa/{sample}.fasta", sample=IDS)
    output:
        list = "list_skesa_kSNP"
    conda:
        "envs/ksnp.yaml"
    params:
        "assemblies/skesa"
    shell:
        """
        MakeKSNP3infile {params} {output.list} A
        """
rule ksnp_dir_spades:
    input:
        contigs = "assemblies/spades/spades-{sample}/contigs.fasta"
    output:
        dir = "assemblies/spades_dir/{sample}.fasta"
    params:
        "{sample}"
    shell:
        """
        cp {input.contigs} {output.dir}
        """
rule ksnp_dir_shovill:
    input:
        contigs = "assemblies/shovill_velvet/shovill_velvet-{sample}/velvet.fasta"
    output:
        dir = "assemblies/shovill_dir/{sample}.fasta"
    params:
        "{sample}"
    shell:
        """
        cp {input.contigs} {output.dir}
        """
rule ksnp_make_spades:
    input:
        contigs = expand("assemblies/spades_dir/{sample}.fasta", sample=IDS)
    output:
        list = "list_spades_kSNP"
    conda:
        "envs/ksnp.yaml"
    params:
        "assemblies/spades_dir"
    shell:
        """
        MakeKSNP3infile {params} {output.list} A
        """
rule ksnp_make_shovill:
    input:
        contigs = expand("assemblies/shovill_dir/{sample}.fasta", sample=IDS)
    output:
        list = "list_shovill_kSNP"
    conda:
        "envs/ksnp.yaml"
    params:
        "assemblies/shovill_dir"
    shell:
        """
        MakeKSNP3infile {params} {output.list} A
        """
rule ksnp_skesa:
    input:
        list = "list_skesa_kSNP"
    output:
        kSNP3 = directory("kSNP_skesa")
    conda:
        "envs/ksnp.yaml"
    threads: 8
    params:
        kmersize = config["ksnp"]["kmersize"]
    log:
        "logs/ksnp_skesa.log"
    shell:
        """
        kSNP3 -in {input.list} -outdir {output.kSNP3} -k {params.kmersize} -core -CPU {threads} 2>&1> {log}
        if [ -f {output.kSNP3}/core_SNPS_matrix.fasta ]; then echo "{output.kSNP3}/core_SNPS_matrix.fasta exists"; else exit 1; 
        """
rule ksnp_spades:
    input:
        list = "list_spades_kSNP"
    output:
        kSNP3 = directory("kSNP_spades")
    conda:
        "envs/ksnp.yaml"
    threads: 8
    params:
        kmersize = config["ksnp"]["kmersize"]
    log:
        "logs/ksnp_spades.log"
    shell:
        """
        kSNP3 -in {input.list} -outdir {output.kSNP3} -k {params.kmersize} -core -CPU {threads} 2>&1> {log}
        f [ -f {output.kSNP3}/core_SNPS_matrix.fasta ]; then echo "{output.kSNP3}/core_SNPS_matrix.fasta exists"; else exit 1; 
        """
rule ksnp_shovill:
    input:
        list = "list_shovill_kSNP"
    output:
        kSNP3 = directory("kSNP_shovill")
    conda:
        "envs/ksnp.yaml"
    threads: 8
    params:
        kmersize = config["ksnp"]["kmersize"]
    log:
        "logs/ksnp_shovill.log"
    shell:
        """
        kSNP3 -in {input.list} -outdir {output.kSNP3} -k {params.kmersize} -core -CPU {threads} 2>&1> {log}
        f [ -f {output.kSNP3}/core_SNPS_matrix.fasta ]; then echo "{output.kSNP3}/core_SNPS_matrix.fasta exists"; else exit 1; 
        """

#filter before IQ-tree
rule _filter_ska_fastq:
    input:
        aln = "ska_output/ska_fastq_alignment.aln"
    output:
        aln = "alignment/snp_ska_fastq_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln} > {output.aln}
        """
rule filter_ska_shovill:
    input:
        aln = "ska_output/ska_shovill_alignment.aln"
    output:
        aln = "alignment/snp_ska_shovill_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln} > {output.aln}
        """
rule filter_ska_spades:
    input:
        aln = "ska_output/ska_spades_alignment.aln"
    output:
        aln = "alignment/snp_ska_spades_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln} > {output.aln}
        """
rule filter_ska_skesa:
    input:
        aln = "ska_output/ska_skesa_alignment.aln"
    output:
        aln = "alignment/snp_ska_skesa_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln} > {output.aln}
        """
rule filter_roary_spades:
    input:
        aln = "roary/spades"
    output:
        aln = "alignment/snp_roary_spades_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln}/core_gene_alignment.aln > {output.aln}
        """
rule filter_roary_shovill:
    input:
        aln = "roary/shovill"
    output:
        aln = "alignment/snp_roary_shovill_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln}/core_gene_alignment.aln > {output.aln}
        """
rule filter_roary_skesa:
    input:
        aln = "roary/skesa"
    output:
        aln = "alignment/snp_roary_skesa_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln}/core_gene_alignment.aln > {output.aln}
        """
rule filter_pirate_spades:
    input:
        aln = "pirate/spades/core_alignment.fasta"
    output:
        aln = "alignment/snp_pirate_spades_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln} > {output.aln}
        """
rule filter_pirate_shovill:
    input:
        aln = "pirate/shovill/core_alignment.fasta"
    output:
        aln = "alignment/snp_pirate_shovill_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln} > {output.aln}
        """
rule filter_pirate_skesa:
    input:
        aln = "pirate/skesa/core_alignment.fasta"
    output:
        aln = "alignment/snp_pirate_skesa_alignment.aln"
    conda:
        "envs/snp-sites.yaml"
    shell:
        """
        snp-sites {input.aln} > {output.aln}
        """

#IQtree
rule IQTree_ska_fastq:
    input:
        full = "ska_output/ska_fastq_alignment.aln",
        snp = "alignment/snp_ska_fastq_alignment.aln"
    output:
        nwk = "IQ-Tree/ska_fastq/ska_fastq.treefile"
    params:
        prefix = "ska_fastq",
        dir = "IQ-Tree/ska_fastq"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/ska_fastq.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_ska_shovill:
    input:
        full = "ska_output/ska_shovill_alignment.aln",
        snp = "alignment/snp_ska_shovill_alignment.aln"
    output:
        nwk = "IQ-Tree/ska_shovill/ska_shovill.treefile"
    params:
        prefix = "ska_shovill",
        dir = "IQ-Tree/ska_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/ska_shovill.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_ska_spades:
    input:
        full = "ska_output/ska_spades_alignment.aln",
        snp = "alignment/snp_ska_spades_alignment.aln"
    output:
        nwk = "IQ-Tree/ska_spades/ska_spades.treefile"
    params:
        prefix = "ska_spades",
        dir = "IQ-Tree/ska_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/ska_spades.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_ska_skesa:
    input:
        full = "ska_output/ska_skesa_alignment.aln",
        snp = "alignment/snp_ska_skesa_alignment.aln"
    output:
        nwk = "IQ-Tree/ska_skesa/ska_skesa.treefile"
    params:
        prefix = "ska_skesa",
        dir = "IQ-Tree/ska_skesa"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/ska_skesa.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_snippy:
    input:
        full = "snippy-core_out/core.full.aln",
        snp = "snippy-core_out/core.aln"
    output:
        nwk = "IQ-Tree/snippy/snippy.treefile"
    params:
        prefix = "snippy",
        dir = "IQ-Tree/snippy"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/snippy.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_roary_shovill:
    input:
        full = "roary/shovill",
        snp = "alignment/snp_roary_shovill_alignment.aln"
    output:
        nwk = "IQ-Tree/roary_shovill/roary_shovill.treefile"
    params:
        prefix = "roary_shovill",
        dir = "IQ-Tree/roary_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/roary_shovill.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}/core_alignment.aln) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_roary_spades:
    input:
        full = "roary/spades",
        snp = "alignment/snp_roary_spades_alignment.aln"
    output:
        nwk = "IQ-Tree/roary_spades/roary_spades.treefile"
    params:
        prefix = "roary_spades",
        dir = "IQ-Tree/roary_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/roary_spades.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}/core_alignment.aln) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_roary_skesa:
    input:
        full = "roary/skesa",
        snp = "alignment/snp_roary_skesa_alignment.aln"
    output:
        nwk = "IQ-Tree/roary_skesa/roary_skesa.treefile"
    params:
        prefix = "roary_skesa",
        dir = "IQ-Tree/roary_skesa"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/roary_skesa.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}/core_alignment.aln) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_pirate_skesa:
    input:
        full = "pirate/skesa/core_alignment.fasta",
        snp = "alignment/snp_pirate_skesa_alignment.aln"
    output:
        nwk = "IQ-Tree/pirate_skesa/pirate_skesa.treefile"
    params:
        prefix = "pirate_skesa",
        dir = "IQ-Tree/pirate_skesa"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/pirate_skesa.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_pirate_shovill:
    input:
        full = "pirate/shovill/core_alignment.fasta",
        snp = "alignment/snp_pirate_shovill_alignment.aln"
    output:
        nwk = "IQ-Tree/pirate_shovill/pirate_shovill.treefile"
    params:
        prefix = "pirate_shovill",
        dir = "IQ-Tree/pirate_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/pirate_shovill.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_pirate_spades:
    input:
        full = "pirate/spades/core_alignment.fasta",
        snp = "alignment/snp_pirate_spades_alignment.aln"
    output:
        nwk = "IQ-Tree/pirate_spades/pirate_spades.treefile"
    params:
        prefix = "pirate_spades",
        dir = "IQ-Tree/pirate_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/pirate_spades.log"
    shell:
         """
         cd {params.dir}
         iqtree -fconst $(snp-sites -C ../../{input.full}) -nt {threads} -pre {params.prefix} -s ../../{input.snp} 2>&1> ../../{log}
         """
rule IQTree_ksnp_spades:
    input:
        snp = "kSNP_spades"
    output:
        nwk = "IQ-Tree/ksnp_spades/ksnp_spades.treefile"
    params:
        prefix = "ksnp_spades",
        dir = "IQ-Tree/ksnp_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/ksnp_spades.log"
    shell:
         """
         cd {params.dir}
         iqtree -nt {threads} -pre {params.prefix} -s ../../{input.snp}/core_SNPs_matrix.fasta 2>&1> ../../{log}
         """
rule IQTree_ksnp_shovill:
    input:
        snp = "kSNP_shovill"
    output:
        nwk = "IQ-Tree/ksnp_shovill/ksnp_shovill.treefile"
    params:
        prefix = "ksnp_shovill",
        dir = "IQ-Tree/ksnp_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/ksnp_shovill.log"
    shell:
         """
         cd {params.dir}
         iqtree -nt {threads} -pre {params.prefix} -s ../../{input.snp}/core_SNPs_matrix.fasta 2>&1> ../../{log}
         """
rule IQTree_ksnp_skesa:
    input:
        snp = "kSNP_skesa"
    output:
        nwk = "IQ-Tree/ksnp_skesa/ksnp_skesa.treefile"
    params:
        prefix = "ksnp_shovill",
        dir = "IQ-Tree/ksnp_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 16
    log:
       "logs/iqtree/ksnp_shovill.log"
    shell:
         """
         cd {params.dir}
         iqtree -nt {threads} -pre {params.prefix} -s ../../{input.snp}/core_SNPs_matrix.fasta 2>&1> ../../{log}
         """

#Robinson-fould metrics with iqtree
rule RF_distance_ska_fastq:
    input:
        nwk = "IQ-Tree/ska_fastq/ska_fastq.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/ska_fastq.txt"
    params:
          "ska_fastq"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/ska_fastq.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_ska_shovill:
    input:
        nwk = "IQ-Tree/ska_shovill/ska_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/ska_shovill.txt"
    params:
          "ska_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/ska_shovill.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_ska_spades:
    input:
        nwk = "IQ-Tree/ska_spades/ska_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/ska_spades.txt"
    params:
          "ska_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/ska_spades.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_ska_skesa:
    input:
        nwk = "IQ-Tree/ska_skesa/ska_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/ska_skesa.txt"
    params:
          "ska_skesa"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/ska_skesa.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_snippy:
    input:
        nwk = "IQ-Tree/snippy/snippy.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/snippy.txt"
    params:
          "snippy"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/snippy.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_roary_shovill:
    input:
        nwk = "IQ-Tree/roary_shovill/roary_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/roary_shovill.txt"
    params:
          "roary_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/roary_shovill.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_roary_spades:
    input:
        nwk = "IQ-Tree/roary_spades/roary_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/roary_spades.txt"
    params:
          "roary_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/roary_spades.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_roary_skesa:
    input:
        nwk = "IQ-Tree/roary_skesa/roary_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/roary_skesa.txt"
    params:
          "roary_skesa"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/roary_skesa.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_pirate_skesa:
    input:
        nwk = "IQ-Tree/pirate_skesa/pirate_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/pirate_skesa.txt"
    params:
          "pirate_skesa"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/pirate_skesa.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_pirate_spades:
    input:
        nwk = "IQ-Tree/pirate_spades/pirate_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/pirate_spades.txt"
    params:
          "pirate_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/pirate_spades.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_pirate_shovill:
    input:
        nwk = "IQ-Tree/pirate_shovill/pirate_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/pirate_shovill.txt"
    params:
          "pirate_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/pirate_shovill.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_ksnp_shovill:
    input:
        nwk = "IQ-Tree/ksnp_shovill/ksnp_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/ksnp_shovill.txt"
    params:
          "ksnp_shovill"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/ksnp_shovill.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_ksnp_spades:
    input:
        nwk = "IQ-Tree/ksnp_spades/ksnp_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/ksnp_spades.txt"
    params:
          "ksnp_spades"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/ksnp_spades.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """
rule RF_distance_ksnp_skesa:
    input:
        nwk = "IQ-Tree/ksnp_skesa/ksnp_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        rf_distance = "RF_distance/ksnp_skesa.txt"
    params:
          "ksnp_skesa"
    conda:
         "envs/IQtree.yaml"
    threads: 8
    log:
       "logs/RF_distance/ksnp_skesa.log"
    shell:
         """
         iqtree -pre {params} -nt {threads} -rf {input.realtree} {input.nwk} 2>&1> {log}
         cp {params}.rfdist {output.rf_distance}
         """

#kendall and colijn metrics with treespace
rule KC_distance_ska:
    input:
        nwk = "IQ-Tree/ska_fastq/ska_fastq.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/ska_fastq.txt"
    conda:
        "envs/R.yaml"
    log:
        "logs/KC_distance/ska_fastq.log"
    shell:
        """
        Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
        """
rule KC_distance_ska_shovill:
    input:
        nwk = "IQ-Tree/ska_shovill/ska_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/ska_shovill.txt"
    params:
          "ska_shovill"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/ska_shovill.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_ska_spades:
    input:
        nwk = "IQ-Tree/ska_spades/ska_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/ska_spades.txt"
    params:
          "ska_spades"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/ska_spades.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_ska_skesa:
    input:
        nwk = "IQ-Tree/ska_skesa/ska_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/ska_skesa.txt"
    params:
          "ska_skesa"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/ska_spades.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_snippy:
    input:
        nwk = "IQ-Tree/snippy/snippy.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/snippy.txt"
    params:
          "snippy"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/snippy.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}       
         """
rule KC_distance_roary_shovill:
    input:
        nwk = "IQ-Tree/roary_shovill/roary_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/roary_shovill.txt"
    params:
          "roary_shovill"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/roary_shovill.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_roary_spades:
    input:
        nwk = "IQ-Tree/roary_spades/roary_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/roary_spades.txt"
    params:
          "roary_spades"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/roary_spades.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_roary_skesa:
    input:
        nwk = "IQ-Tree/roary_skesa/roary_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/roary_skesa.txt"
    params:
          "roary_skesa"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/roary_skesa.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log} 
         """
rule KC_distance_pirate_skesa:
    input:
        nwk = "IQ-Tree/pirate_skesa/pirate_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/pirate_skesa.txt"
    params:
          "pirate_skesa"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/pirate_skesa.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_pirate_spades:
    input:
        nwk = "IQ-Tree/pirate_spades/pirate_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/pirate_spades.txt"
    params:
          "pirate_spades"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/pirate_spades.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_pirate_shovill:
    input:
        nwk = "IQ-Tree/pirate_shovill/pirate_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/pirate_shovill.txt"
    params:
          "pirate_shovill"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/pirate_shovill.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_ksnp_shovill:
    input:
        nwk = "IQ-Tree/ksnp_shovill/ksnp_shovill.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/ksnp_shovill.txt"
    params:
          "ksnp_shovill"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/ksnp_shovill.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_ksnp_spades:
    input:
        nwk = "IQ-Tree/ksnp_spades/ksnp_spades.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/ksnp_spades.txt"
    params:
          "ksnp_spades"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/ksnp_spades.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """
rule KC_distance_ksnp_skesa:
    input:
        nwk = "IQ-Tree/ksnp_skesa/ksnp_skesa.treefile",
        realtree = "input/tree_div100.nwk"
    output:
        kc_distance = "KC_distance/ksnp_skesa.txt"
    params:
          "ksnp_skesa"
    conda:
         "envs/R.yaml"
    log:
       "logs/KC_distance/ksnp_skesa.log"
    shell:
         """
         Rscript Modules/Plot_tree_differences.R -f {input.nwk} -r {input.realtree} > {output.kc_distance} 2>&1> {log}
         """

